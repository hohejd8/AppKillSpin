#================================================================
# $ApplyObservers.input$
#================================================================



DataBoxItems=
    Domain(Items=
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.0435256276), #d=8.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.038037431), #d=9.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.03356387179), #d=10.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.02987703978), #d=11.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.02680407367), #d=12.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.02421507216), #d=13.5
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.02201202116), #d=14.5
	   ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.01418267927), #d=20.0
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.010990), #d=24.0
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.0080083), #d=30.0
	   #ConstVectorOfDouble(Output=OmegaOrbit; Components=0,0,0.0052966), #d=40.0
           ConstDouble(Output=dtExpansionFactor;   Value=0),
	   ConstVectorOfDouble(Output=OmegaInnerShiftBC;  Components=0,0,0)
	   ),

    Subdomain(Items=
	      GlobalDifferentiator(
                  GlobalDifferentiator=Standard(
                     TopologicalDifferentiator=Spectral;
                  );
              ),

	      GlobalIntegrator(Integrator=Spectral),


              EvaluateMatrixFormula(Output=ConformalMetric;Dim=3; Symm=11;
                                    M[0,0]=1; M[1,1]=1; M[2,2]=1), 
              AddMetricItems(Metric=ConformalMetric; Prefix=Conformal),


              EvaluateMatrixFormula(Output=dtConformalMetric;Dim=3; Symm=11;
                                    # no components -> output==zero
                                    ), 
              FirstDeriv(Input=dtConformalMetric; Output=ddtConformalMetric),
              FirstDeriv(Input=Shift; Output=dShift),

 	      #For physical observers
	      EvaluateScalarFormula(Output=One;Formula=1;),
	      #EvaluateScalarFormula(A=ConformalFactor;Output=Psi4;Formula=A*A*A*A;),
	      #BinaryOp(Output=PhysicalMetric; A=ConformalMetric; B=Psi4; Op=A*B;),
         EvaluateScalarFormula(Output=TrExtrinsicCurvature; Formula=0),
         EvaluateScalarFormula(Output=dtTrExtrinsicCurvature; Formula=0),
         FirstDeriv(Input=TrExtrinsicCurvature; 
                         Output=dTrExtrinsicCurvature),

	      );



Observers=


    # Compute spectral coefficient vs. basis-function index
    # To view, 
    # > ConvertOneD -target grace *oned 
    # > Xmgrblock -ly *grace

#    SliceIntegral(Input = One;
#		  SliceName = SliceLFF.SphereA0;
#		  BaseFileName = AHArea;
#		  VolumeMetric = PhysicalMetric;),


    ObservePhysicalInitialData(
		Items=Subdomain(Items=
                            Trace(
                                Input=K;Output=TrK;
				PositionOfIndices=l,l;
				Indices=0,1;InvMetric=Invg
                             );
                       ),   
		Domain(Items=
                             AddStrahlkorperSurface(
                                SurfaceName=hohejd8SkS;
                                MeshName=hohejd8SkM;
                                Nth=__LA__;
                                Nph=2*(__LA__);
                                Center=__d__/2.,0.,0.;
                                Radius=__R1__;
                             ),
                             ComputeSKWM(
                                Surface=hohejd8SkS;
                                Mesh=hohejd8SkM;
                                SKWMName=hohejd8SkWM;
                             ),
                             FlatspaceCKV(
                                Metric=g;
                                SurfaceWithMesh=hohejd8SkWM;
                                Output=S_x;
                             ),
                             FlatspaceCKV(
                                Metric=g;
                                SurfaceWithMesh=hohejd8SkWM;
                                Output=S_y;
                             ),
                             FlatspaceCKV(
                                Metric=g;
                                SurfaceWithMesh=hohejd8SkWM;
                                Output=S_z;
                             ),
                             ComputeAKV(
                                StrahlkorperWithMesh=hohejd8SkWM;
                                ConformalFactor=ConformalFactor;
                                AKVGuess=-3.0e-06, 6.0e-09, -0.50;
                                Radius=__R1__;
                                Verbose=true;
                                Output=hohejd8AKV;
                                Solver=Broyden;
                                DivNorm=true;
                                VortNorm=true;
                                SS=true;
                                fLNorm=true;
                                fLambdaNorm=true;
                                XiDivLNorm=true;
                             );
               );
#                            ProperSepHorizons(Output=ProperSep;
#				xMin= -__d__/2 + __R2__ + 0.0000000000001;
#				xMax=  __d__/2 - __R1__ - 0.0000000000001;
#				Metric=g;Eps = 1.e-6););


          Observers=NormOfTensor(Input=Ham, Mom, dtg, dtK; 
				       MetricForTensors=None;
				       Op=L2;Filename=AdmEqns.dat),

#                TestSurfaceBasis(
#                  SWMName=hohejd8SkWM;
#                  ConformalFactor=ConformalFactor;
#                ),

                AdmIntegralS2(
                   Metric=g;
                   InvMetric=Invg;
                   ExtrinsicCurvature=K;
                   StrahlkorperWithMesh=hohejd8SkWM;
                   L=__LA__;
                   Center=__d__/2,0,0;
                   Radius=__R1__;
                   ConformalFactor=ConformalFactor;
                   #KillingVector=S_x, S_y, S_z;
#add these names to the output vector in the observer
#can I give a vector of KillingVectors to this observer?
                   KillingVector=hohejd8AKV, S_z;
                   InertialXi=FlatSpace),

                AdmIntegrals(Sphere=SphereC1;
         		    MonopoleTerms=ConformalFactor,
		             Lapse;K=K; TrK=TrK;Invg=Invg;dg=dg;),

		DumpTensors(Input=Ham, Mom),

     );

